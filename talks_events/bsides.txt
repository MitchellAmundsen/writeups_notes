-active directory
	-why
		-no control access on source code
		-github store source code, but developers can fork it
		-can't revoke privledges and user access
	-what
		-directory service from microsoft for windows domain network
		-global list directory
		-microsoft is federation and AD identities into the azure cloud
		-OKTA - big player that marries into your AD account and control web access
	-windows powershell: big array of cmdlets and scripts for active directory
	-AD query through code not permissions
	-properties of interest
		-samAccountName
		-memberOf
		-lastLogon
		-userAccountControl
		-manager
		-path
	-fix
		-query all users that you find nightly, write their properties to DB
		-audit and log all external accounts for different systems to this entry
		-see if anything changes for that user between two successive days
	-review users
		-users with managers that have left the compony
		-users that have not logged on in a month
		-users with logon rights when off-boarding tickets that are past due
		-deactivated users with active accounts on external systems
		-users who have an accountExpires date past due
		-users of mothership companies - no active monitoring
		-users with multiple credentials
-windows encryption and bitlocker
	-full disk encryption protects from physical attack
	-TPM hardware module responsible for performing crypto operations 
	-	-boot process is hashed and the value is stored
		-TPM stores values in PCR in registry
	-attacks
		-attack on RAM
			-hard-rebooting into an attacker controlled OS
			-physically removing RAM module and placing it attacker controlled system
			-RAM holds PCR keys and won't lose it
		-attacks on BIOS/EFI
			-bitlocker assumes bios/efi is trusted
			-if mainboard does no use signed BIOS/EFI, an attacker can use a custom image that doesn't load MBR into PCR
			-other bugs in bios can allow attacker to flash malicious software
		-attack on MBR/bootload
			-MBR and NTFS boot sector are simple and easy to verify
			-Windows boot manager and NTFS driver and XML slightly more complex
			-bug in these may allow attack
		-attack on OS
			-local security authority manages authenitication using security subsystem provider
			-client-domain authentication the kerberos SSP changes messages with the domain controller
				-windows domain authenitcation requests a session ticket from the DC
				-TGT and S (secret key) are used to request a service ticket from the DC
			-machine passwords
				-when a workstation first joins a domain
					-a secret key is generated, called the machine password
					-this password is sent to the DC and is shared for future communication
				-local credentials cache
					-user can login when DC isn't available
					-cache is updated whenever the workstation sees credential changes
					-can change password with access to domain controller
					-needs DC confirmation to change, but you control DC
					-so changing DC data allows change of password
					-local cache saves it, so going off DC allows same password in

-top 10 aws security practices
	-enable cloudtrail (event logger)
	-disable root api access key and secret key
		-create administrative IAM users
		-make sure billing and contact questions are filled
		-bonus: setup MFA on root and throw away key
	-enable MFA tokens everywhere
		-can be assigned to roles
		-Authy, Google Auth
	-reduce number of IAM users with admin rights
		-not just people - apps
		-review IAM policies onusers, groups, and roles
	-use roles for EC2
		-AWS SDKs and aws-cli support EC2 roles
		-secure devops on EC2
		-create EC2 specific roles
	-least priviledge: limit what IAM entities can do with strong/explicit policies
		-programs should use least amount of privledge possible
		-should be applied to all automated workflows
		-very specific IAM plicies
	-rotate all keys regularly
		-90 day minimum
		-mostly useful for when roles for EC2 won't work in automated workflows
	-use IAM roles STS AssumeRole where possible
		-temporary credentials
		-can be used in place of priviledged IAM user access keys temporary credentials
		-allows 3rd parties to access AWS accounts more securely
	-use AutoScaling to dampen DDoS effects
		-autoscaling increase number of instances automatically
		-cost more but keeps site up 
		-may need temporary increase in EC2 limit
	-do not allow 0.0.0.0/0 in any EC2/ELB security group unless you mean it
		-monitor security groups regularly
		-don't leave the door wide open
	-watch wold-readable/listable S3 bucket policies
		-open s3 buckets is popular for trolling for API access keys
		-check bucket ACLs for all grantees, authenticated users, and policies

-roll own c2 server
	-good for avoiding detection
	-botnet taxonomy
		-attacking behavior (info stealing)
		-rallying mechanisms (static or random)
		-communication protocols (DNS, HTTPS)
		-observable botnet activity (host, network)
		-evasion techniques
	-architecture goals
		-isolated sections
		-random heartbeat time
	-comm channels
		-https 
			-generally trusted
			-hard to detect in high traffic times
			-good api for https endpoints
		-dns
		-stego
		-raw tcp





